# DEMO pipeline for java build with gradle

# This workflow:
  # sets up parallel 2 hosts (runners, provided by GithHub) to run (ubuntu, windows)
  # fetches the repository
  # validates gradle wrapper
  # sets up gradle
  # builds the application with gradle
  # runs the application with gradle
  
  ######
  # and mainly serves a good example for a workflow, how it is working, how to set it up
  ######
  
# name of the pipeline
name: Java build pipeline with Gradle

#define environment variable to set up java version
env:
  java_jdk_version: ${{ 15 }}

# list of actions, which triggers the pipeline
on:
  # when a new commit is pushed
  push:
  
  # when a pull request is opened to the default branch (master or main). This is a environment variable, GitHub knows what to do with it.
  pull_request:
    branches: [ $default-branch ]

# this jobs will be executed during the action (these are the reactions of the actions/event above)
jobs:
  #name of job
  build:
    # execute strategy - we want to use the same workflow both for windows and unix based OS
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        
    # specify the system(s), which will run the app - sets up also the systems
    # matrix.os is a variable of the workflow
    runs-on: ${{ matrix.os }}
    
    # define steps to run the app
    steps:
    
    # fetch the repository (pull repository to the target OS)
    - uses: actions/checkout@v1
    
    # validate gradlew script
    - name: Validate Gradle wrapper (gradlew script, or gradle.bat)
      uses: gradle/wrapper-validation-action@v1
    
    # setup the JDK (java version)
    - name: Set up JDK 15
      uses: actions/setup-java@v1
      with:
        java-version: ${{ env.java_jdk_version }}
    
    # list the files of the repo (in the log you will see if something is missing)
    - name: List repo files (windows)
      if: matrix.os == 'windows-latest'
      run: ls
    - name: List repo files (ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: ls -a
    
    # grant execute persmission to the gradlew file (otherwise will fail)
    # windows does not require this execute permission..
    - name: Grant permission
      if: matrix.os == 'ubuntu-latest'
      run: chmod +x gradlew
    
    # use the predefined gradle build action (cache is automated)
    # in reality it`s just run the ./gradlew command
    - name: Gradle build
      uses: gradle/gradle-build-action@v2
      with:
        # ./gradlew build --scan will be executed: build action of gradle and it also provides a short summary about the build as output
        arguments: build --scan
    
    # test report, generated by gradle test task
    # if there is not any test on the path to execute (and gradle is not configured to execute tests, will throw a warning)
    - name: Archive test report
      uses: actions/upload-artifact@v2
      with:
        name: Test report
        path: build/reports/tests/test
        
    # run the app (produces output from app)
    - name: Gradle run
      uses: gradle/gradle-build-action@v2
      with:
        arguments: run
      
